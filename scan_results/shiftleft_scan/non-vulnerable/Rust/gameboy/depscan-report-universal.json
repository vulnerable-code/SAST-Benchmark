{"id": "CVE-2020-35910", "package": "pkg:cargo/lock_api@0.3.4", "purl": "pkg:cargo/lock_api@0.3.4", "package_type": "crates", "package_usage": "N/A", "version": "0.3.4", "fix_version": "0.4.2", "severity": "MEDIUM", "cvss_score": "5.5", "short_description": "An issue was discovered in the lock_api crate before 0.4.2 for Rust. A data race can occur because of MappedMutexGuard unsoundness.", "related_urls": ["https://rustsec.org/advisories/RUSTSEC-2020-0070.html"]}
{"id": "CVE-2020-35911", "package": "pkg:cargo/lock_api@0.3.4", "purl": "pkg:cargo/lock_api@0.3.4", "package_type": "crates", "package_usage": "N/A", "version": "0.3.4", "fix_version": "0.4.2", "severity": "MEDIUM", "cvss_score": "4.7", "short_description": "An issue was discovered in the lock_api crate before 0.4.2 for Rust. A data race can occur because of MappedRwLockReadGuard unsoundness.", "related_urls": ["https://rustsec.org/advisories/RUSTSEC-2020-0070.html"]}
{"id": "CVE-2020-35912", "package": "pkg:cargo/lock_api@0.3.4", "purl": "pkg:cargo/lock_api@0.3.4", "package_type": "crates", "package_usage": "N/A", "version": "0.3.4", "fix_version": "0.4.2", "severity": "MEDIUM", "cvss_score": "4.7", "short_description": "An issue was discovered in the lock_api crate before 0.4.2 for Rust. A data race can occur because of MappedRwLockWriteGuard unsoundness.", "related_urls": ["https://rustsec.org/advisories/RUSTSEC-2020-0070.html"]}
{"id": "CVE-2020-35913", "package": "pkg:cargo/lock_api@0.3.4", "purl": "pkg:cargo/lock_api@0.3.4", "package_type": "crates", "package_usage": "N/A", "version": "0.3.4", "fix_version": "0.4.2", "severity": "MEDIUM", "cvss_score": "4.7", "short_description": "An issue was discovered in the lock_api crate before 0.4.2 for Rust. A data race can occur because of RwLockReadGuard unsoundness.", "related_urls": ["https://rustsec.org/advisories/RUSTSEC-2020-0070.html"]}
{"id": "CVE-2020-35914", "package": "pkg:cargo/lock_api@0.3.4", "purl": "pkg:cargo/lock_api@0.3.4", "package_type": "crates", "package_usage": "N/A", "version": "0.3.4", "fix_version": "0.4.2", "severity": "MEDIUM", "cvss_score": "4.7", "short_description": "An issue was discovered in the lock_api crate before 0.4.2 for Rust. A data race can occur because of RwLockWriteGuard unsoundness.", "related_urls": ["https://rustsec.org/advisories/RUSTSEC-2020-0070.html"]}
{"id": "CVE-2021-32803", "package": "pkg:cargo/tar@0.4.35", "purl": "pkg:cargo/tar@0.4.35", "package_type": "npm", "package_usage": "N/A", "version": "0.4.35", "fix_version": "3.2.3", "severity": "HIGH", "cvss_score": "8.1", "short_description": "The npm package \"tar\" (aka node-tar) before versions 6.1.2, 5.0.7, 4.4.15, and 3.2.3 has an arbitrary File Creation/Overwrite vulnerability via insufficient symlink protection. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.", "related_urls": ["https://www.npmjs.com/advisories/1771", "https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw", "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf"]}
{"id": "CVE-2021-38511", "package": "pkg:cargo/tar@0.4.35", "purl": "pkg:cargo/tar@0.4.35", "package_type": "crates", "package_usage": "N/A", "version": "0.4.35", "fix_version": "0.4.36", "severity": "HIGH", "cvss_score": "7.5", "short_description": "An issue was discovered in the tar crate before 0.4.36 for Rust. When symlinks are present in a TAR archive, extraction can create arbitrary directories via .. traversal.", "related_urls": ["https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tar/RUSTSEC-2021-0080.md", "https://rustsec.org/advisories/RUSTSEC-2021-0080.html"]}
{"id": "CVE-2021-32804", "package": "pkg:cargo/tar@0.4.35", "purl": "pkg:cargo/tar@0.4.35", "package_type": "npm", "package_usage": "N/A", "version": "0.4.35", "fix_version": "3.2.2", "severity": "HIGH", "cvss_score": "8.1", "short_description": "The npm package \"tar\" (aka node-tar) before versions 6.1.1, 5.0.6, 4.4.14, and 3.3.2 has a arbitrary File Creation/Overwrite vulnerability due to insufficient absolute path sanitization. node-tar aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. This logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. This issue was addressed in releases 3.2.2, 4.4.14, 5.0.6 and 6.1.1. Users may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths. See referenced GitHub Advisory for details. Be aware of CVE-2021-32803 which fixes a similar bug in later versions of tar.", "related_urls": ["https://www.npmjs.com/advisories/1770", "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4", "https://github.com/npm/node-tar/security/advisories/GHSA-3jfq-g458-7qm9", "https://www.npmjs.com/package/tar", "https://www.oracle.com/security-alerts/cpuoct2021.html", "https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf"]}
